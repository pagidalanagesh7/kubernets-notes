# 📘 Module 1: Introduction & Architecture

This module provides a solid foundation in Kubernetes, starting from basic concepts to setting up a self-managed cluster.

---

## 🧩 Kubernetes Introduction

Kubernetes is an open-source container orchestration platform that automates the deployment, scaling, and management of containerized applications.

**Key Features:**
- Automated container deployment and scaling
- Service discovery and load balancing
- Self-healing capabilities (restart, replace, reschedule)
- Secret and configuration management
- Horizontal scaling and rolling updates

---

## 🏛️ Kubernetes Architecture

Kubernetes architecture follows a client-server model with a **Master Node** and multiple **Worker Nodes**.

### 🧠 Master Node Components:
- **API Server:** Central control plane, handles REST requests.
- **Scheduler:** Assigns pods to nodes based on resource availability.
- **Controller Manager:** Manages controllers like replication, endpoints.
- **etcd:** Distributed key-value store for cluster state and configuration.

### ⚙️ Worker Node Components:
- **Kubelet:** Agent that communicates with the API server and manages pods.
- **Kube-proxy:** Handles network rules on nodes.
- **Container Runtime:** Software that runs containers (e.g., Docker, containerd).

---

## ⚙️ Kubernetes Cluster (Self-Managed) Setup Using Kubeadm

`kubeadm` is a tool that helps bootstrap a Kubernetes cluster.

### Steps:
1. Prepare machines with Linux (Ubuntu recommended).
2. Install Docker and Kubernetes packages (`kubelet`, `kubeadm`, `kubectl`).
3. Initialize the master node:
   ```bash
   sudo kubeadm init --pod-network-cidr=192.168.0.0/16
   ```
4. Set up `kubectl` config for the current user:
   ```bash
   mkdir -p $HOME/.kube
   sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
   sudo chown $(id -u):$(id -g) $HOME/.kube/config
   ```
5. Deploy a pod network (e.g., Calico, Flannel).
6. Join worker nodes using the command generated by `kubeadm`.

---

## 🗂️ Kubernetes Namespace

Namespaces are virtual clusters within a physical cluster. They allow resource isolation and multi-tenancy.

**Use Cases:**
- Separate environments (dev, staging, prod)
- Manage access and policies
- Resource quotas

Common namespaces:
- `default`
- `kube-system`
- `kube-public`

---

## 📦 Kubernetes Objects Overview

Kubernetes objects represent the desired state of your system.

**Common Objects:**
- **Pod:** Smallest deployable unit with containers.
- **Service:** Exposes a set of pods.
- **Deployment:** Manages replica sets for app availability.
- **ConfigMap & Secret:** Stores configuration and sensitive data.
- **PersistentVolume & PersistentVolumeClaim:** Manages storage.

Each object is defined in a YAML/JSON file and managed via `kubectl`.

---

> ✅ This module prepares you to understand and set up a Kubernetes environment from scratch. Next, we dive into core Kubernetes resources!
